/// <reference lib="webworker" />

import { build, files, version } from "$service-worker";

// `build` = files generated by Vite/SvelteKit build (hashed, like /_app/immutable/...)
// `files` = your static assets in `static/`
// `version` = build version (cache busting)

// Define a cache name
const CACHE_NAME = `cache-${version}`;

// Combine build and static files into assets to cache
const ASSETS = [...build, ...files];

// Install event: cache assets
self.addEventListener("install", (event: any) => {
	event.waitUntil(caches.open(CACHE_NAME).then((cache) => cache.addAll(ASSETS)));
});

// Activate event: clean up old caches
self.addEventListener("activate", (event: any) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			for (const key of keys) {
				if (key !== CACHE_NAME) await caches.delete(key);
			}
		})
	);
});

// Fetch event: network-first for HTML, cache-first for assets
self.addEventListener("fetch", (event: any) => {
	const request = event.request;

	// Only handle GET requests
	if (request.method !== "GET") return;

	// For navigation requests (HTML) -> network first, fallback to cache
	if (request.mode === "navigate") {
		event.respondWith(fetch(request).catch(() => caches.match("/")));
		return;
	}

	// For static assets -> cache first
	event.respondWith(
		caches.match(request).then((cached) => {
			if (cached) return cached;
			return fetch(request).then((response) => {
				const cloned = response.clone();
				caches.open(CACHE_NAME).then((cache) => cache.put(request, cloned));
				return response;
			});
		})
	);
});
